workflows:
  expo-react-native-android:
    name: Expo React Native Android Build
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      node: 20.11.0
      vars:
        PACKAGE_NAME: "com.ankitgupta8.tutorfinder"
        EXPO_USERNAME: $EXPO_USERNAME
        EXPO_PASSWORD: $EXPO_PASSWORD
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs=-Xmx4096m"
      xcode: latest
      java: 17
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'main'
          include: true
    scripts:
      - name: Pre-build cleanup
        script: |
          rm -rf node_modules
          rm -rf android/build
          rm -rf android/app/build
          rm -f package-lock.json
          rm -f yarn.lock
          rm -rf $HOME/.gradle/caches/
      
      - name: Set up local properties
        script: |
          mkdir -p "$CM_BUILD_DIR/android"
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      
      - name: Install dependencies with yarn
        script: |
          yarn cache clean
          yarn install --network-timeout 100000 --frozen-lockfile || yarn install --network-timeout 100000
          
      - name: Install global tools
        script: |
          npm install -g expo-cli@latest
          npm install -g eas-cli@latest
          
      - name: Configure Expo project
        script: |
          # Make sure babel.config.js is properly configured
          if [ ! -f babel.config.js ]; then
            echo "module.exports = function(api) {
              api.cache(true);
              return {
                presets: ['babel-preset-expo'],
                plugins: ['@babel/plugin-proposal-export-namespace-from']
              };
            };" > babel.config.js
          fi
          
          # Create or update metro.config.js
          echo "const { getDefaultConfig } = require('@expo/metro-config');

          const defaultConfig = getDefaultConfig(__dirname);
          
          defaultConfig.resolver.sourceExts = [
            ...defaultConfig.resolver.sourceExts,
            'jsx',
            'js',
            'ts',
            'tsx',
            'json'
          ];
          
          module.exports = defaultConfig;" > metro.config.js
          
          # Update or create app.json if needed
          if [ ! -f app.json ]; then
            echo '{
              "expo": {
                "name": "TutorFinder",
                "slug": "tutorfinder",
                "version": "1.0.0",
                "orientation": "portrait",
                "icon": "./assets/icon.png",
                "splash": {
                  "image": "./assets/splash.png",
                  "resizeMode": "contain",
                  "backgroundColor": "#ffffff"
                },
                "updates": {
                  "fallbackToCacheTimeout": 0
                },
                "assetBundlePatterns": [
                  "**/*"
                ],
                "ios": {
                  "supportsTablet": true,
                  "bundleIdentifier": "com.ankitgupta8.tutorfinder"
                },
                "android": {
                  "adaptiveIcon": {
                    "foregroundImage": "./assets/adaptive-icon.png",
                    "backgroundColor": "#FFFFFF"
                  },
                  "package": "com.ankitgupta8.tutorfinder"
                },
                "web": {
                  "favicon": "./assets/favicon.png"
                }
              }
            }' > app.json
          fi
          
          # Create eas.json if it doesn't exist
          if [ ! -f eas.json ]; then
            echo '{
              "build": {
                "development": {
                  "developmentClient": true,
                  "distribution": "internal"
                },
                "preview": {
                  "distribution": "internal"
                },
                "production": {
                  "distribution": "store"
                }
              }
            }' > eas.json
          fi
          
      - name: Run Expo Doctor
        script: |
          npx expo-doctor || true
      
      - name: Prebuild Android
        script: |
          export EAS_NO_VCS=1
          npx expo prebuild --platform android --clean
          
      - name: Setup keystore
        script: |
          if [ -n "$CM_KEYSTORE" ]; then
            echo $CM_KEYSTORE | base64 --decode > $CM_BUILD_DIR/android/app/keystore.jks
            
            # Create keystore.properties file
            echo "storeFile=keystore.jks" > $CM_BUILD_DIR/android/keystore.properties
            echo "storePassword=$CM_KEYSTORE_PASSWORD" >> $CM_BUILD_DIR/android/keystore.properties
            echo "keyAlias=$CM_KEY_ALIAS" >> $CM_BUILD_DIR/android/keystore.properties
            echo "keyPassword=$CM_KEY_PASSWORD" >> $CM_BUILD_DIR/android/keystore.properties
            
            # Update app/build.gradle to use keystore.properties
            SIGNING_CONFIG="
            def keystorePropertiesFile = rootProject.file('keystore.properties')
            def keystoreProperties = new Properties()
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                
                signingConfigs {
                    release {
                        storeFile file(keystoreProperties['storeFile'])
                        storePassword keystoreProperties['storePassword']
                        keyAlias keystoreProperties['keyAlias']
                        keyPassword keystoreProperties['keyPassword']
                    }
                }
                
                buildTypes {
                    release {
                        signingConfig signingConfigs.release
                    }
                }
            }
            "
            
            # Insert the signing config before the last closing brace
            sed -i.bak -e "/^}/ i\\$SIGNING_CONFIG" $CM_BUILD_DIR/android/app/build.gradle
          fi
      
      - name: Configure Gradle
        script: |
          cd android
          
          # Update gradle.properties
          cat > gradle.properties << EOL
          org.gradle.jvmargs=-Xmx4096m -XX:MaxPermSize=4096m
          org.gradle.daemon=true
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          android.useAndroidX=true
          android.enableJetifier=true
          kotlin.code.style=official
          android.disableAutomaticComponentCreation=true
          EOL
          
          # Fix root build.gradle versions
          cat > build.gradle << EOL
          // Top-level build file where you can add configuration options common to all sub-projects/modules.
          
          buildscript {
              ext {
                  buildToolsVersion = "33.0.0"
                  minSdkVersion = 21
                  compileSdkVersion = 33
                  targetSdkVersion = 33
                  kotlinVersion = "1.7.20"
                  ndkVersion = "25.1.8937393"
              }
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath("com.android.tools.build:gradle:7.4.2")
                  classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.20")
                  classpath("de.undercouch:gradle-download-task:5.0.1")
                  // NOTE: Do not place your application dependencies here; they belong
                  // in the individual module build.gradle files
              }
          }
          
          allprojects {
              repositories {
                  maven {
                      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
                      url("\$rootDir/../node_modules/react-native/android")
                  }
                  maven {
                      // Android JSC is installed from npm
                      url("\$rootDir/../node_modules/jsc-android/dist")
                  }
                  mavenCentral {
                      // We don't want to fetch react-native from Maven Central as there are
                      // older versions over there.
                      content {
                          excludeGroup "com.facebook.react"
                      }
                  }
                  google()
                  maven { url 'https://www.jitpack.io' }
              }
          }
          EOL
          
          # Set correct gradle wrapper version
          cd gradle/wrapper
          cat > gradle-wrapper.properties << EOL
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.5.1-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOL
          cd ../..
          
      - name: Update app build.gradle with packaging options
        script: |
          # Add packagingOptions to app/build.gradle
          PACKAGING_OPTIONS="
          android {
              packagingOptions {
                  pickFirst '**/*.so'
                  exclude 'META-INF/DEPENDENCIES'
                  exclude 'META-INF/LICENSE'
                  exclude 'META-INF/LICENSE.txt'
                  exclude 'META-INF/license.txt'
                  exclude 'META-INF/NOTICE'
                  exclude 'META-INF/NOTICE.txt'
                  exclude 'META-INF/notice.txt'
                  exclude 'META-INF/ASL2.0'
                  exclude 'META-INF/*.kotlin_module'
              }
              
              // Fix for duplicate classes error
              configurations.all {
                  resolutionStrategy {
                      force 'androidx.core:core-ktx:1.9.0'
                      force 'androidx.appcompat:appcompat:1.6.1'
                  }
              }
          }
          "
          
          # Insert the packaging options before the last closing brace
          sed -i.bak -e "/^}/ i\\$PACKAGING_OPTIONS" $CM_BUILD_DIR/android/app/build.gradle
          
      - name: Build Android Release
        script: |
          cd android
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew assembleRelease --stacktrace
          
      - name: Verify APK
        script: |
          ls -la $CM_BUILD_DIR/android/app/build/outputs/apk/release/
          echo "APK generation completed on $(date)"

    artifacts:
      - android/app/build/outputs/apk/release/*.apk
      - android/app/build/outputs/mapping/release/mapping.txt

    publishing:
      email:
        recipients:
          - ankit.kapilvastu@gmail.com
        notify:
          success: true
          failure: true
